We organized our program around three classes, a Board class, an Agent class and a GameState class. The GameState class stores a Board
object and two Agent objects along with other state specific information such as the parent state and the state's chosen move. The GameState
stores the entire game and is instantiated as our parent game state when our player class is instantiated.

When the action method is called, it invokes the choose best move method from the parent game state. When choosing the best move, we use 
the Minimax search algorithm with alpha-beta pruning to find the most optimal move. Our choose best move method first checks if the game
is in the placing or moving phase. If we are in the placing phase, the search depth is static, however if we are in the moving phase, our 
search depth changes according to how many pieces are on the board. This optimization allows us to search deeper if there are less pieces
on the board. During our search, we generate many child GameState objects and move them accordingly. We then sort our generated states 
based on whether we are minimizing or maximizing which will hopefully lead to maximal or minimal results faster due to better ordering which
subsequently leads to more pruning.